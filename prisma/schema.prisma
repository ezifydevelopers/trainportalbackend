generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                        @id @default(autoincrement())
  name                 String
  email                String                     @unique
  password             String
  role                 Role
  companyId            Int?
  isVerified           Boolean                    @default(false)
  status               UserStatus                 @default(PENDING)
  certificates         Certificate[]
  receivedMessages     ChatMessage[]              @relation("MessageReceiver")
  sentMessages         ChatMessage[]              @relation("MessageSender")
  chatRoomParticipants ChatRoomParticipant[]      @relation("ChatRoomParticipants")
  feedback             Feedback[]
  helpRequests         HelpRequest[]
  mcqAnswers           MCQAnswer[]
  managedCompanies     ManagerCompanyAssignment[] @relation("ManagerAssignments")
  notifications        Notification[]
  resourceTimeTracking ResourceTimeTracking[]
  progress             TraineeProgress[]
  company              Company?                   @relation(fields: [companyId], references: [id])
}

model Company {
  id                 Int                        @id @default(autoincrement())
  name               String                     @unique
  logo               String?
  certificates       Certificate[]
  chatRooms          ChatRoom[]
  managerAssignments ManagerCompanyAssignment[]
  modules            TrainingModule[]
  users              User[]
}

model TrainingModule {
  id               Int               @id @default(autoincrement())
  name             String
  companyId        Int
  order            Int               @default(0)
  isResourceModule Boolean           @default(false)
  feedback         Feedback[]
  helpRequests     HelpRequest[]
  mcqs             MCQ[]
  mcqAnswers       MCQAnswer[]
  resources        Resource[]
  progress         TraineeProgress[]
  company          Company           @relation(fields: [companyId], references: [id])
  videos           Video[]
}

model Video {
  id       Int            @id @default(autoincrement())
  url      String
  duration Int
  moduleId Int
  module   TrainingModule @relation(fields: [moduleId], references: [id])
}

model MCQ {
  id          Int            @id @default(autoincrement())
  question    String
  options     String[]
  answer      String
  explanation String?
  moduleId    Int
  module      TrainingModule @relation(fields: [moduleId], references: [id])
  mcqAnswers  MCQAnswer[]
}

model TraineeProgress {
  id        Int            @id @default(autoincrement())
  userId    Int
  moduleId  Int
  completed Boolean        @default(false)
  score     Int?
  timeSpent Int?
  pass      Boolean        @default(false)
  createdAt DateTime       @default(now())
  status    String         @default("IN_PROGRESS")
  updatedAt DateTime       @updatedAt
  module    TrainingModule @relation(fields: [moduleId], references: [id])
  user      User           @relation(fields: [userId], references: [id])
}

model MCQAnswer {
  id             Int            @id @default(autoincrement())
  userId         Int
  moduleId       Int
  mcqId          Int
  selectedOption String
  isCorrect      Boolean
  createdAt      DateTime       @default(now())
  mcq            MCQ            @relation(fields: [mcqId], references: [id])
  module         TrainingModule @relation(fields: [moduleId], references: [id])
  user           User           @relation(fields: [userId], references: [id])
}

model HelpRequest {
  id         Int               @id @default(autoincrement())
  traineeId  Int
  moduleId   Int?
  message    String?
  status     HelpRequestStatus @default(PENDING)
  adminNotes String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  module     TrainingModule?   @relation(fields: [moduleId], references: [id])
  trainee    User              @relation(fields: [traineeId], references: [id])
}

model Feedback {
  id        Int            @id @default(autoincrement())
  moduleId  Int
  rating    Int
  comment   String?
  createdAt DateTime       @default(now())
  userId    Int
  module    TrainingModule @relation(fields: [moduleId], references: [id])
  user      User           @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model ChatRoom {
  id           Int                   @id @default(autoincrement())
  name         String?
  type         ChatRoomType          @default(DIRECT)
  companyId    Int
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  messages     ChatMessage[]
  company      Company               @relation(fields: [companyId], references: [id])
  participants ChatRoomParticipant[] @relation("ChatRoomParticipants")
}

model ChatRoomParticipant {
  id         Int      @id @default(autoincrement())
  userId     Int
  chatRoomId Int
  joinedAt   DateTime @default(now())
  isActive   Boolean  @default(true)
  chatRoom   ChatRoom @relation("ChatRoomParticipants", fields: [chatRoomId], references: [id])
  user       User     @relation("ChatRoomParticipants", fields: [userId], references: [id])

  @@unique([userId, chatRoomId])
}

model ChatMessage {
  id          Int         @id @default(autoincrement())
  content     String
  senderId    Int
  receiverId  Int?
  chatRoomId  Int
  messageType MessageType @default(TEXT)
  isRead      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  chatRoom    ChatRoom    @relation(fields: [chatRoomId], references: [id])
  receiver    User?       @relation("MessageReceiver", fields: [receiverId], references: [id])
  sender      User        @relation("MessageSender", fields: [senderId], references: [id])
}

model Resource {
  id                    Int                    @id @default(autoincrement())
  url                   String
  filename              String
  originalName          String
  filePath              String
  type                  ResourceType
  duration              Int?
  estimatedReadingTime  Int?
  moduleId              Int
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  module                TrainingModule         @relation(fields: [moduleId], references: [id])
  timeTracking          ResourceTimeTracking[]
}

model ResourceTimeTracking {
  id         Int      @id @default(autoincrement())
  userId     Int
  resourceId Int
  timeSpent  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  resource   Resource @relation(fields: [resourceId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, resourceId])
}

model ManagerCompanyAssignment {
  id        Int      @id @default(autoincrement())
  managerId Int
  companyId Int
  createdAt DateTime @default(now())
  company   Company  @relation(fields: [companyId], references: [id])
  manager   User     @relation("ManagerAssignments", fields: [managerId], references: [id])

  @@unique([managerId, companyId])
}

model Certificate {
  id                Int       @id @default(autoincrement())
  userId            Int
  companyId         Int
  certificateNumber String    @unique
  issuedAt          DateTime  @default(now())
  completedAt       DateTime?
  pdfPath           String?
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  company           Company   @relation(fields: [companyId], references: [id])
  user              User      @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  TRAINEE
  MANAGER
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
}

enum HelpRequestStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ChatRoomType {
  DIRECT
  GROUP
}

enum MessageType {
  TEXT
  FILE
  IMAGE
  SYSTEM
}

enum ResourceType {
  VIDEO
  PDF
  DOCUMENT
  IMAGE
  AUDIO
}
